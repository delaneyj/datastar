package site

import (
	"fmt"
	"github.com/delaneyj/datastar"
	"math"
)

templ Home() {
	{{
		cdnText := `<script type="module" defer src="https://cdn.jsdelivr.net/npm/@sudodevnull/datastar"></script>`
	}}
	@Page() {
		<div class="flex flex-col w-full min-h-screen bg-base-200 md:bg-gradient-to-br md:items-center from-base-300 to-base-100">
			<div class="flex flex-col items-center gap-8 p-4 md:pt-16 md:max-w-3xl max-w-none">
				<img class="w-64 md:w-96" src={ staticPath("images/rocket.webp") }/>
				<div class="flex flex-col items-end font-bold uppercase font-brand">
					<div class="text-3xl md:text-6xl text-primary">Datastar</div>
					<div class="text-sm text-secondary">v{ packageJSON.Version }</div>
				</div>
				<div class="text-center font-brand">
					<div class="text-xl">Real-time hypermedia framework</div>
				</div>
				<p>
					Using a single
					<span class="text-lg font-bold text-primary">{ iifeBuildSizeStr }</span>
					CDN link and have access to everything needed to rival a full-stack SPA framework; all in the language of your choice.
					To give some perspective, the entire Datastar framework over <span class="text-lg font-bold text-primary">{ fmt.Sprintf("%.0f", math.Floor(186*1024/float64(iifeBuildSize))) }x</span> smaller than the rocket image above.
				</p>
				<div class="flex flex-wrap w-full gap-4">
					<a
						class="flex items-center justify-center flex-1 btn bg-discord"
						href="https://discord.gg/CMgWJ5wR"
					>
						@icon("simple-icons:discord")
						Discuss
					</a>
					<a
						class="flex items-center justify-center flex-1 btn bg-github"
						href="https://github.com/delaneyj/datastar/tree/main/packages/library/src/lib"
					>
						@icon("simple-icons:github")
						Source
					</a>
					<a
						class="flex items-center justify-center flex-1 btn bg-reddit"
						href="https://www.reddit.com/r/datastardev/"
					>
						@icon("simple-icons:reddit")
						News
					</a>
				</div>
				<div class="w-full shadow-xl card bg-base-100">
					<div class="card-body">
						<div class="flex items-center gap-4">
							<button
								class="btn btn-primary btn-ghost"
								data-on-click={ fmt.Sprintf("$$clipboard('%s')", cdnText) }
							>
								@icon("material-symbols:content-copy")
							</button>
							<code
								class="flex-1 overflow-auto text-xs text-primary text-ellipsis"
							>
								{ cdnText }
							</code>
						</div>
					</div>
				</div>
				<a
					class="flex items-center w-full gap-4 btn btn-primary btn-lg"
					href={ templ.SafeURL("/examples") }
				>
					@icon("svg-spinners:bars-scale-middle")
					{ "Show me cool examples!" }
					@icon("svg-spinners:bars-scale-middle")
				</a>
				<a
					class="flex items-center w-full gap-1 btn btn-accent btn-outline btn-lg"
					href={ templ.SafeURL("/guide") }
				>
					@icon("simple-icons:rocket")
					{ "Getting Started" }
				</a>
				<img class="w-full" src="/chart"/>
				<div id="todosMVC" data-on-load="$$get('/api/todos')">
					<p>Todos Example</p>
					<p>If you are seeing this message, please clear your cookies and refresh the page.</p>
					<p>We recently updated the site and the old cookies are causing issues.</p>
				</div>
				<div class="alert alert-info">
					@icon("material-symbols:info")
					<div>
						<div class="font-bold">
							Datastar now comes with an Inspector WebComponent!
						</div>
						<div class="text-xs">
							Can be added to any page and get full access to the Datastar internals for debugging
						</div>
					</div>
				</div>
				<div class="p-2 shadow-xl rounded-box bg-base-100 md:max-w-3xl">
					<datastar-inspector></datastar-inspector>
				</div>
			</div>
		</div>
	}
}

type TodoViewMode int

const (
	TodoViewModeAll TodoViewMode = iota
	TodoViewModeActive
	TodoViewModeCompleted
	TodoViewModeLast
)

var TodoViewModeStrings = []string{"All", "Active", "Completed"}

type Todo struct {
	Text      string `json:"text"`
	Completed bool   `json:"completed"`
}

type TodoMVC struct {
	Todos      []*Todo      `json:"todos"`
	EditingIdx int          `json:"editingIdx"`
	Mode       TodoViewMode `json:"mode"`
}

templ TodosMVCView(mvc *TodoMVC) {
	{{
		hasTodos := len(mvc.Todos) > 0
		left, completed := 0, 0
		for _, todo := range mvc.Todos {
			if !todo.Completed {
				left++
			} else {
				completed++
			}
		}
		input := ""
		if mvc.EditingIdx >= 0 {
			input = mvc.Todos[mvc.EditingIdx].Text
		}
	}}
	<div id="todosMVC" class="w-full shadow-xl card bg-base-100 ring-4 ring-primary">
		<div class="card-body">
			<div
				class="flex flex-col w-full gap-4"
				data-store={ fmt.Sprintf("{input:'%s'}", input) }
			>
				<section class="flex flex-col gap-2">
					<header class="flex flex-col gap-2">
						<div class="alert alert-info">
							@icon("material-symbols:info")
							<p>
								<div class="text-sm">
									This mini application is driven by a
									<br/>
									<span class="italic font-bold uppercase text-primary">single get request!</span>
									As you interact with the UI, the backend state is updated and new partial HTML fragments are sent down to the client via Server-Sent Events.  You can make simple apps or full blown SPA replacements with this pattern.  Open your dev tools and watch the network tab to see the magic happen (you will want to look for the "/todos" Network/EventStream tab).
								</div>
							</p>
						</div>
						<div class="flex items-baseline gap-2">
							<h1 class="text-4xl font-bold uppercase font-brand md:text-6xl text-primary">todos</h1>
							<h3 class="text-lg">example</h3>
						</div>
						<h2 class="text-sm">
							The input is bound to a local store, but this is not a single page application.  It is like having <a class="link-primary" href="https://htmx.org" target="_blank">HTMX</a> + <a class="link-primary" href="https://alpinejs.dev/" target="_blank">Alpine.js</a> but with just one API to learn and much easier to extend.
						</h2>
						<div class="flex items-center gap-2">
							{{
								indicatorID := "indicatorAll"
							}}
							<div
								class="text-4xl"
								id={ indicatorID }
								data-show={ fmt.Sprintf("$$isFetching('#%s')", indicatorID) }
							>
								@icon("svg-spinners:blocks-shuffle-3")
							</div>
							if hasTodos {
								<div class="tooltip" data-tip="toggle all todos">
									<button
										class="btn btn-lg"
										data-on-click="$$post('/api/todos/-1/toggle')"
										data-testid="toggle_all_todos"
										data-fetch-indicator={ fmt.Sprintf("'#%s'", indicatorID) }
										data-show={ fmt.Sprintf("!$$isFetching('#%s')", indicatorID) }
									>
										@icon("material-symbols:checklist")
									</button>
								</div>
							}
							if mvc.EditingIdx <0 {
								@TodoInput(-1)
							}
						</div>
					</header>
					if hasTodos {
						<section>
							<ul class="divide-y divide-primary" data-testid="todos_list">
								for i, todo := range mvc.Todos {
									@TodoRow(mvc.Mode, todo, i, i == mvc.EditingIdx)
								}
							</ul>
						</section>
						<footer class="flex flex-wrap items-center justify-between gap-2">
							<span class="todo-count">
								<strong data-testid="todo_count">
									{ fmt.Sprint(left) }
									if (len(mvc.Todos) > 1) {
										items
									} else {
										item
									}
								</strong> left
							</span>
							<div class="join">
								for i := TodoViewModeAll; i < TodoViewModeLast; i++ {
									if i == mvc.Mode {
										<div class="btn btn-xs btn-primary join-item" data-testid={ TodoViewModeStrings[i] + "_mode" }>{ TodoViewModeStrings[i] }</div>
									} else {
										<button
											class="btn btn-xs join-item"
											data-on-click={ fmt.Sprintf("$$put('/api/todos/mode/%d')", i) }
											data-testid={ TodoViewModeStrings[i] + "_mode" }
										>
											{ TodoViewModeStrings[i] }
										</button>
									}
								}
							</div>
							<div class="join">
								if completed > 0 {
									<div class="tooltip" data-tip={ fmt.Sprintf("clear %d completed todos", completed) }>
										<button
											class="btn btn-error btn-xs join-item"
											data-on-click="$$delete('/api/todos/-1')"
											data-testid="clear_todos"
										>
											@icon("material-symbols:delete")
										</button>
									</div>
								}
								<div class="tooltip" data-tip="Reset list">
									<button
										class="btn btn-warning btn-xs join-item"
										data-on-click="$$put('/api/todos/reset')"
										data-testid="reset_todos"
									>
										@icon("material-symbols:delete-sweep")
									</button>
								</div>
							</div>
						</footer>
						<footer class="flex justify-center text-xs">
							<div>Click to edit, click away to cancel, press enter to save.</div>
						</footer>
					}
				</section>
			</div>
		</div>
	</div>
}

templ TodoInput(i int) {
	<input
		id="todoInput"
		data-testid="todos_input"
		class="flex-1 w-full italic input input-bordered input-lg"
		placeholder="What needs to be done?"
		data-model="input"
		data-on-keypress={ fmt.Sprintf(`
			if (event.key === 'Enter' && $input.trim().length) {
				$$put('/api/todos/%d/edit');
				$input = '';
			}
		`, i) }
		if i >= 0 {
			data-on-click.outside.capture={ datastar.PUT("/api/todos/cancel") }
		}
	/>
}

templ TodoRow(mode TodoViewMode, todo *Todo, i int, isEditing bool) {
	{{
		indicatorID := fmt.Sprintf("indicator%d", i)
	}}
	if isEditing {
		@TodoInput(i)
	} else if (
		mode == TodoViewModeAll) ||
		(mode == TodoViewModeActive && !todo.Completed) ||
		(mode == TodoViewModeCompleted && todo.Completed) {
		<li class="flex items-center gap-8 p-1 p-2 group" id={ fmt.Sprintf("todo%d", i) }>
			<div
				class="text-4xl"
				id={ indicatorID }
				data-show={ fmt.Sprintf("$$isFetching('#%s')", indicatorID) }
			>
				@icon("svg-spinners:blocks-shuffle-3")
			</div>
			<label
				class="text-4xl cursor-pointer"
				data-on-click={ datastar.POST("/api/todos/%d/toggle", i) }
				data-fetch-indicator={ fmt.Sprintf("'#%s'", indicatorID) }
				data-show={ fmt.Sprintf("!$$isFetching('#%s')", indicatorID) }
			>
				if todo.Completed {
					@icon("material-symbols:check-box-outline")
				} else {
					@icon("material-symbols:check-box-outline-blank")
				}
			</label>
			<label
				class="flex-1 text-lg cursor-pointer select-none"
				data-on-click={ datastar.GET("/api/todos/%d/edit", i) }
				data-fetch-indicator={ fmt.Sprintf("'#%s'", indicatorID) }
			>{ todo.Text }</label>
			<button
				class="invisible btn btn-error group-hover:visible"
				data-on-click={ datastar.DELETE("/api/todos/%d", i) }
				data-testid={ fmt.Sprintf("delete_todo%d", i) }
				data-fetch-indicator={ fmt.Sprintf("'#%s'", indicatorID) }
				data-show={ fmt.Sprintf("!$$isFetching('#%s')", indicatorID) }
			>
				@icon("material-symbols:close")
			</button>
		</li>
	}
}
