package site

import (
	"fmt"
	"github.com/delaneyj/datastar/backends/go/site/games/snake"
	"strings"
)

templ SnakeButtons(g *snake.SnakeGame) {
	<div id="snake_buttons">
		if g.Mode == snake.ModeNotInitialized {
			<button
				class="btn btn-primary btn-lg"
				data-on-click="$$post('/examples/snake/reset')"
			>
				@icon("mdi:snake")
				Start
			</button>
		} else if g.Mode == snake.ModeFinished {
			<button
				class="btn btn-primary btn-lg"
				data-on-click="$$post('/examples/snake/reset')"
			>
				@icon("mdi:snake")
				Restart
			</button>
		} else {
			{{ lgIcon := []string{"class", "text-4xl"} }}
			<div class="flex justify-center">
				<div class="max-w-lg">
					<div class="grid grid-cols-3 grid-rows-2 gap-4">
						<button
							class={ "btn btn-ghost col-start-2 row-start-1 ",
							templ.KV("btn-disabled", g.SnakeDirection == snake.DirectionUp) }
							data-on-keydown.window.key_w="$$post('/examples/snake/inputs/up')"
							data-on-click="$$post('/examples/snake/inputs/up')"
						>
							@icon("mdi:chevron-up", lgIcon...)
						</button>
						<button
							class={ "btn btn-ghost col-start-1 row-start-2",
							templ.KV("btn-disabled", g.SnakeDirection == snake.DirectionLeft) }
							data-on-keydown.window.key_a="$$post('/examples/snake/inputs/left')"
							data-on-click="$$post('/examples/snake/inputs/left')"
						>
							@icon("mdi:chevron-left", lgIcon...)
						</button>
						<button
							class={ "btn btn-ghost col-start-2 row-start-2",
						 templ.KV("btn-disabled", g.SnakeDirection == snake.DirectionDown) }
							data-on-keydown.window.key_s="$$post('/examples/snake/inputs/down')"
							data-on-click="$$post('/examples/snake/inputs/down')"
						>
							@icon("mdi:chevron-down", lgIcon...)
						</button>
						<button
							class={ "btn btn-ghost col-start-3 row-start-2",
							templ.KV("btn-disabled", g.SnakeDirection == snake.DirectionRight) }
							data-on-keydown.window.key_d="$$post('/examples/snake/inputs/right')"
							data-on-click="$$post('/examples/snake/inputs/right')"
						>
							@icon("mdi:chevron-right", lgIcon...)
						</button>
					</div>
				</div>
			</div>
		}
	</div>
}

templ SnakeArenaSVG(g *snake.SnakeGame, foodSize int) {
	{{
		foodSizeStr := fmt.Sprintf("%d", foodSize)
		position2points := func(positions []snake.GamePosition) string {
			sb := strings.Builder{}
			for _, p := range positions {
				sb.WriteString(fmt.Sprintf("%d,%d ", p.X, p.Y))
			}
			snakeParts := sb.String()
			return snakeParts
		}
	}}
	if g.Mode == snake.ModeNotInitialized {
		<p>Waiting for game to start...</p>
	} else {
		<svg
			id="snake_arena"
			class="border border-accent w-full aspect-video"
			viewBox={ fmt.Sprintf("0 0 %d %d", g.Width, g.Height) }
			xmlns="http://www.w3.org/2000/svg"
		>
			for _,f  := range g.Food {
				<rect
					x={ fmt.Sprintf("%d", f.Position.X) }
					y={ fmt.Sprintf("%d", f.Position.Y) }
					width={ foodSizeStr }
					height={ foodSizeStr }
					fill="green"
				></rect>
			}
			<polyline style="fill:none;stroke:red;stroke-width:3" points={ position2points(g.Snake) }></polyline>
			<circle
				style="fill:red;stroke:red;stroke-width:3"
				cx={ fmt.Sprintf("%d", g.Snake[0].X) }
				cy={ fmt.Sprintf("%d", g.Snake[0].Y) }
				r={ fmt.Sprintf("%d", foodSize/2) }
			></circle>
		</svg>
	}
}
