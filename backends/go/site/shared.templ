package site

import (
	"net/http"
	"strings"
)

templ Page() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<title>DATASTAR</title>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<link rel="icon" href={ staticPath("images/datastar_icon.svg") }/>
			<link href={ staticPath("css/site.css") } rel="stylesheet" type="text/css"/>
			<link rel="preconnect" href="https://fonts.googleapis.com"/>
			<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
			<link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@300..700&family=Inter:wght@100..900&family=Gideon+Roman:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900&display=swap" rel="stylesheet"/>
			<script src="https://code.iconify.design/iconify-icon/2.1.0/iconify-icon.min.js"></script>
			<script type="module" defer src={ staticPath("library/datastar.js") }></script>
		</head>
		<body class="flex flex-col min-h-screen overflow-y-scroll min-w-screen scrollbar scrollbar-thumb-primary scrollbar-track-accent">
			{ children... }
		</body>
	</html>
}

templ icon(icon string, attrs ...string) {
	<iconify-icon icon={ icon } { KVPairsAttrs(attrs...)... } noobserver></iconify-icon>
}

templ headerIconLink(iconName, href string) {
	<a target="_blank" rel="noopener noreferrer" href={ templ.SafeURL(href) }>
		@icon(iconName)
	</a>
}

templ headerTopLevelLink(r *http.Request, text string) {
	{{ url := templ.SafeURL("/" + strings.ToLower(text)) }}
	<a
		href={ url }
		class={
			"font-bold uppercase link-hover",
			templ.KV("link-primary", strings.HasPrefix(r.URL.Path, string(url))),
		}
	>{ text }</a>
}

templ headerExternalLinks() {
	@headerIconLink("simple-icons:discord", "https://discord.gg/CHvPMrAp6F")
	@headerIconLink("simple-icons:github", "https://github.com/delaneyj/datastar/tree/main/packages/library")
	@headerIconLink("simple-icons:npm", "https://www.npmjs.com/package/@sudodevnull/datastar")
	@headerIconLink("simple-icons:twitter", "https://x.com/DelaneyGillilan")
}

templ headerTopLevelLinks(r *http.Request) {
	@headerTopLevelLink(r, "Guide")
	@headerTopLevelLink(r, "Reference")
	@headerTopLevelLink(r, "Examples")
	@headerTopLevelLink(r, "Essays")
}

templ header(r *http.Request) {
	<div class="navbar bg-base-200">
		<div class="flex justify-between w-full gap-4">
			<div class="flex items-baseline gap-1">
				<a
					class="flex gap-1 text-2xl font-bold uppercase font-brand"
					href="/"
				>
					<span>Datastar</span>
					<img src={ staticPath("images/datastar_icon.svg") } class="h-8"/>
				</a>
				<div class="font-mono text-xs text-accent">v{ packageJSON.Version }</div>
			</div>
			<div class="hidden lg:text-md lg:text-lg lg:flex lg:gap-4 lg:visible ">
				@headerTopLevelLinks(r)
			</div>
			<div class="hidden text-xl lg:flex lg:gap-4 lg:visible">
				@headerExternalLinks()
			</div>
		</div>
	</div>
	<div class="flex flex-wrap justify-around visible gap-2 pb-8 text-sm bg-base-200 lg:hidden">
		@headerTopLevelLinks(r)
	</div>
	<div class="visible navbar bg-base-300 lg:hidden">
		<div class="navbar-start">
			<label for="sidebar-drawer" class="btn btn-ghost drawer-button">
				@icon("material-symbols:menu")
			</label>
		</div>
		<div class="gap-4 navbar-end">
			@headerExternalLinks()
		</div>
	</div>
}

type SidebarLink struct {
	ID         string
	Label      string
	URL        templ.SafeURL
	Prev       *SidebarLink
	Next       *SidebarLink
	IsDisabled bool
}

type SidebarGroup struct {
	Label string
	Links []*SidebarLink
}

templ SidebarPage(r *http.Request, sidebarGroups []*SidebarGroup, current *SidebarLink, contents string) {
	@Page() {
		@highlightCSS
		<div class="drawer">
			<input id="sidebar-drawer" type="checkbox" class="drawer-toggle"/>
			<div class="flex flex-col min-h-screen drawer-content">
				@header(r)
				<div class="flex flex-1">
					<aside class="flex-col hidden gap-4 px-4 py-8 overflow-y-auto lg:flex min-w-64 bg-base-300 lg:visible">
						@SidebarContents(sidebarGroups, current)
					</aside>
					<div class="flex flex-col w-full gap-16 p-4 lg:items-center lg:p-16">
						@SidebarPrevNextLinks(sidebarGroups, current)
						<article
							class="flex flex-col flex-1 p-1 prose prose-primary lg:prose-lg prose-a:link-primary max-w-none lg:max-w-prose"
						>
							@templ.Raw(contents)
						</article>
						@SidebarPrevNextLinks(sidebarGroups, current)
					</div>
				</div>
			</div>
			<aside class="drawer-side">
				<label for="sidebar-drawer" aria-label="close sidebar" class="drawer-overlay"></label>
				<ul class="min-h-full p-4 menu w-80 bg-base-300 text-base-content">
					@SidebarContents(sidebarGroups, current)
				</ul>
			</aside>
		</div>
	}
}

templ SidebarContents(sidebarGroups []*SidebarGroup, current *SidebarLink) {
	<div class="flex flex-col gap-8 uppercase">
		for i, grp := range sidebarGroups {
			<div class="flex flex-col gap-2">
				<h3 class="text-xs font-bold text-primary">{ grp.Label }</h3>
				for _, link := range grp.Links {
					if link.IsDisabled {
						<div class="opacity-25">{ link.Label }</div>
					} else {
						<a
							class="link-secondary link-hover"
							href={ link.URL }
						>{ link.Label }</a>
					}
				}
				if i != len(sidebarGroups)-1 {
					<div class="divider"></div>
				}
			</div>
		}
	</div>
}

templ SidebarPrevNextLinks(essayGroups []*SidebarGroup, current *SidebarLink) {
	<div class="flex flex-wrap justify-between w-full gap-4">
		<div>
			if  current.Prev != nil {
				<a
					class="btn btn-sm btn-ghost"
					disabled?={ current.Prev.IsDisabled }
					href={ current.Prev.URL }
				>
					@icon("material-symbols:arrow-back-ios")
					{ current.Prev.Label }
				</a>
			}
		</div>
		<div>
			if current.Next != nil {
				<a
					class="btn btn-sm btn-ghost"
					disabled?={ current.Next.IsDisabled }
					href={ current.Next.URL }
				>
					{ current.Next.Label }
					@icon("material-symbols:arrow-forward-ios")
				</a>
			}
		</div>
	</div>
}
